version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: qdrant-catalog-postgres
    environment:
      POSTGRES_DB: qdrant_catalog_sync
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - qdrant-catalog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: qdrant-catalog-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qdrant-catalog-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qdrant-catalog-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres123
      DATABASE_NAME: qdrant_catalog_sync
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QDRANT_HOST: 192.168.2.6
      QDRANT_PORT: 6333
      GEMINI_API_KEY: AIzaSyCjvj7BHkpcbglS4s7UgAFUMTDa0Mzb5oo
      JWT_SECRET: your-super-secret-jwt-key-change-this
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qdrant-catalog-network
    volumes:
      - ./backend/src:/app/src
    command: npm run start:dev

volumes:
  postgres_data:
  redis_data:

networks:
  qdrant-catalog-network:
    driver: bridge
